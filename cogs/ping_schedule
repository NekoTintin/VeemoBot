from discord.ext import commands
from discord.embeds import Embed
from discord.ui import View, Button

import asyncio
from datetime import datetime as dt
import datetime
from pytz import timezone
from requests import get
from os.path import exists, getsize
import sqlite3

from data import vs_stages, rules

tzone = timezone("Europe/Paris")
url = "https://splatoon.oatmealdome.me/api/v1/three/versus/phases?count=12"
channel_id = 1034344413851299850
params = {'count': '12'}
headers = {'accept': 'application/json'}

class Ping_schedule(commands.Cog):
    
    def __init__(self, bot) -> None:
        self.bot = bot
        bot.loop.create_task(self._verify_data())
        super().__init__()
        
    async def _verify_data(self):
        await self.bot.wait_until_ready()
        channel = self.bot.get_channel(channel_id)
        
        while not self.bot.is_closed():
            self._check_data()
            
            await asyncio.sleep(60)

    def _create_embed(self, data: dict) -> Embed:
        emb = Embed(title=rules[data["BankaraOpen"]["rule"]]["name"], description=f"@everyone", color=0x290029,
                    url="https://splatoon.oatmealdome.me")
        emb.set_image(url=vs_stages[data["BankaraOpen"]["stages"][0]]["image"])
        emb.set_thumbnail(url=rules[data["BankaraOpen"]["rule"]]["icon"])
        emb.set_footer(icon_url="https://splatoon.oatmealdome.me/img/pwa/icon/apple-touch-icon-ipad-retina-152x152.png",
            text="Depuis splatoon.oatmealdome.me")
        emb.add_field(name="Stages",
            value=f'{vs_stages[data["BankaraOpen"]["stages"][0]]["name"]}\n{vs_stages[data["BankaraOpen"]["stages"][1]]["name"]}')
        emb.add_field(name='Horaires',
            value=f'De {data["startTime"][11:-4]} Ã  {data["endTime"][11:-4]}')
        return emb
    
    
    def _write_data(self, rule, mode, start_time_fr) -> None:
        conn = sqlite3.connect("/home/Tintin/discord_bot/VeemoBot/ping_data.db")
        cur = conn.cursor()
        
        cur.execute("SELECT * FROM Schedule")
        if start_time_fr in cur.fetchone()[3]:
            print("pass")
            conn.close()
            return
                
        cur.execute("""INSERT INTO Schedule (title, stage_1, stage_2, start_time, end_time, image_url, thumbnail_url) VALUES (?, ?, ?, ?, ?, ?, ?)""",
            (rule, vs_stages[mode["BankaraOpen"]["stages"][0]]["name"], vs_stages[mode["BankaraOpen"]["stages"][1]]["name"], mode["startTime"], mode["endTime"], 
             vs_stages[mode["BankaraOpen"]["stages"][1]]["image"], rules[rule]["icon"]))
        conn.commit()
        conn.close()
        
    
    def _check_data(self):
        response = get(url, params=params, headers=headers)
        if response.status_code == 200:
            json_data = response.json()
            
            for mode in json_data["normal"]:
                rule = mode["BankaraOpen"]["rule"]
                
                start_time = dt.fromisoformat(mode["startTime"][:-1])
                start_time_fr = start_time + datetime.timedelta(hours=2)
                
                if (rule == "Clam" or rule == "Goal") and start_time_fr.time().hour == 22:
                    self._write_data(rule, mode)
                    self._create_embed()
        
async def setup(bot) -> None:
    await bot.add_cog(Ping_schedule(bot))